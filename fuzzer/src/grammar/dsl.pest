grammar_rules = _{ SOI ~ grammar_rule+ ~ EOI }

grammar_rule = {
    attribute? ~
    identifier ~ assignment_operator ~ modifier? ~
    opening_brace ~ expression ~ closing_brace
}

assignment_operator = { "=" }
opening_brace       = { "{" }
closing_brace       = { "}" }
opening_paren       = { "(" }
closing_paren       = { ")" }
opening_brack       = { "[" }
closing_brack       = { "]" }

modifier = _{ silent_modifier }

silent_modifier          = { "_" }

expression =  { choice_operator? ~ term ~ (infix_operator ~ term)* }
term       =  { node ~ postfix_operator* }
node       = _{ opening_paren ~ expression ~ closing_paren | terminal }
terminal   = _{ identifier | string | range }

infix_operator   = _{ right_sequence_operator | sequence_operator | choice_operator }
postfix_operator = _{
    optional_operator |
    repeat_exact |
    repeat_min |
    repeat_max |
    repeat_min_max
}

sequence_operator           = { "~" }
right_sequence_operator     = { "<" }
choice_operator             = { "|" }
optional_operator           = { "?" }

repeat_exact   = { opening_brace ~ number ~ closing_brace }
repeat_min     = { opening_brace ~ number ~ comma ~ closing_brace }
repeat_max     = { opening_brace ~ comma ~ number ~ closing_brace }
repeat_min_max = { opening_brace ~ number ~ comma ~ number ~ closing_brace }

decimal = @{ "0" | '1'..'9' ~ '0'..'9'* }
hex = ${ hex_prefix ~ hex_digit+}
hex_prefix = { "0x" }
number = { hex | decimal }
integer = @{ "-"? ~ number }
zero = _{ "0" }

comma = { "," }

attribute = {
    "#" ~ opening_brack ~ attr_expr ~ closing_brack
}
attr_expr = {
    attr ~ attribute_assignment_operator ~ attr_expr_inner
}
attr = ${
    identifier ~ member_operator ~ attr_name | string | number
}
attr_expr_inner = _{
    attr ~ (attribute_binary_operator ~ attr)*
}
attr_name = _{
    attr_length |
    attr_value |
    attr_reps
}
attribute_assignment_operator = _{
    assignment_by_rsh_operator |
    assignment_by_lsh_operator |
    assignment_by_xor_operator |
    assignment_by_or_operator |
    assignment_by_and_operator |
    assignment_operator
}
attribute_binary_operator = _{
    attribute_and_op |
    attribute_or_op |
    attribute_xor_op |
    attribute_lsh_op |
    attribute_rsh_op |
    attribute_sub_op
}

attr_length = { "length" }
attr_value = { "value" }
attr_reps = { "reps" }
assignment_by_rsh_operator = { ">>=" }
assignment_by_lsh_operator = { "<<=" }
assignment_by_and_operator = { "&=" }
assignment_by_or_operator = { "|=" }
assignment_by_xor_operator = { "^=" }
attribute_and_op = { "&" }
attribute_or_op = { "|" }
attribute_xor_op = { "^" }
attribute_lsh_op = { "<<" }
attribute_rsh_op = { ">>" }
attribute_sub_op = { "-" }

identifier = @{ !"PUSH" ~ ("_" | alpha) ~ ("_" | alpha_num)* }
alpha      = _{ 'a'..'z' | 'A'..'Z' }
alpha_num  = _{ alpha | '0'..'9' }

string             = ${ quote ~ inner_str ~ quote }
range              =  { character ~ range_operator ~ character }
character          = ${ single_quote ~ inner_chr ~ single_quote }

inner_str = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner_str)? }
inner_chr = @{ escape | ANY }
escape    = @{ "\\" ~ ("\"" | "\\" | "r" | "n" | "t" | "0" | "'" | code | unicode) }
code      = @{ "x" ~ hex_digit{2} }
unicode   = @{ "u" ~ opening_brace ~ hex_digit{2, 6} ~ closing_brace }
hex_digit = @{ '0'..'9' | 'a'..'f' | 'A'..'F' }

quote          = { "\"" }
single_quote   = { "'" }
range_operator = { ".." }
member_operator = { "." }

newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }